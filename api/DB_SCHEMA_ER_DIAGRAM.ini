                                                                ┌───────────────┐
                                                                │   Person      │  <- abstract base
                                                                │  (abstract)   │
                                                                └───────────────┘
                                                                ▲         ▲
                                                                │         │
                                                        ┌────────┘         └────────┐
                                                        │                           │
                                                ┌─────────────┐              ┌─────────────┐
                                                │   Student   │              │   Teacher   │
                                                │─────────────│              │─────────────│
                                                │ id (PK)     │              │ id (PK)     │
                                                │ name        │              │ name        │
                                                │ email       │              │ email       │
                                                │ course_id FK│─────────────►│             │
                                                └─────────────┘              └─────────────┘
                                                        │  ▲                        │
                                                        │  │                        │
                                                        │  │                        │
                                                        │  │ ManyToMany             │ ManyToMany
                                                        │  └───────────────┐        │
                                                        │                  │        │
                                                ┌─────────────┐       ┌─────────────┐
                                                │   Profile   │       │   Subject   │
                                                │─────────────│       │─────────────│
                                                │ id (PK)     │       │ id (PK)     │
                                                │ student_id  │◄─────►│ name        │
                                                │ age         │       └─────────────┘
                                                │ address     │
                                                └─────────────┘

                                                ┌─────────────┐
                                                │   Course    │
                                                │─────────────│
                                                │ id (PK)     │
                                                │ name        │
                                                └─────────────┘
                                                
                                                ┌─────────────┐
                                                │  Employee   │
                                                │─────────────│
                                                │ id (PK)     │
                                                │ name        │
                                                │ manager_id FK ──┐
                                                └─────────────┘   │
                                                                    │ Self-Referential
                                                                    │ (Manager is also Employee)
                                                                    ▼
                                                                Employee (same table)

                                                ┌────────────────────────┐
                                                │ StudentRegionNorth      │
                                                │───────────────         │
                                                │ id (PK)                │
                                                │ name                   │
                                                │ email                  │
                                                │ course_id FK           │
                                                └────────────────────────┘
                                                (Horizontal sharding example - in another DB)





Diagrammatic Relationship

              Person (abstract)
               /        \
          Student        Teacher
          |   \             \
      Profile   Course       Subject
         |       |          /
       Student-Subject (M2M junction)
     
Employee --(self FK)--> Manager

StudentRegion (sharded version of Student)




Django Models:

from django.db import models

# Abstract base
class Person(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)

    class Meta:
        abstract = True

# Course
class Course(models.Model):
    name = models.CharField(max_length=50)

# Subject
class Subject(models.Model):
    name = models.CharField(max_length=50)

# Teacher
class Teacher(Person):
    subjects = models.ManyToManyField(Subject)

# Student
class Student(Person):
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    subjects = models.ManyToManyField(Subject)

# Profile (One-to-One)
class Profile(models.Model):
    student = models.OneToOneField(Student, on_delete=models.CASCADE)
    age = models.IntegerField()
    address = models.TextField()

# Employee (Self-Referential)
class Employee(models.Model):
    name = models.CharField(max_length=100)
    manager = models.ForeignKey('self', null=True, blank=True, on_delete=models.SET_NULL)

# Example: Horizontal Sharding
class StudentRegionNorth(Student):
    class Meta:
        db_table = 'student_north'
        managed = False  # We'll manually manage DB routing









# **Key Points in Diagram**

1. **Abstract Base:** `Person` is abstract → no DB table.
2. **One-to-One:** `Student` ↔ `Profile` via `student_id`.
3. **One-to-Many:** `Course` → `Student` via `course_id`.
4. **Many-to-Many:**

   * `Student` ↔ `Subject` → junction table `student_subject`
   * `Teacher` ↔ `Subject` → junction table `teacher_subject`
5. **Self-Referential:** `Employee.manager_id` points to `Employee.id`.
6. **Sharding:** `StudentRegionNorth` simulates horizontal sharding in another DB.
7. **Primary Keys:** All tables have `id` as PK.
8. **Foreign Keys:** Properly join tables where necessary.




from django.db import models

# ==============================
# Abstract Base
# ==============================
class Person(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)

    class Meta:
        abstract = True

# ==============================
# Courses
# ==============================
class Course(models.Model):
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name

# ==============================
# Subjects
# ==============================
class Subject(models.Model):
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name

# ==============================
# Teacher
# ==============================
class Teacher(Person):
    subjects = models.ManyToManyField(Subject, related_name='teachers')

    def __str__(self):
        return self.name

# ==============================
# Student
# ==============================
class Student(Person):
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='students')
    subjects = models.ManyToManyField(Subject, related_name='students')

    def __str__(self):
        return self.name

# ==============================
# Profile (One-to-One)
# ==============================
class Profile(models.Model):
    student = models.OneToOneField(Student, on_delete=models.CASCADE, related_name='profile')
    age = models.IntegerField()
    address = models.TextField()

    def __str__(self):
        return f"{self.student.name} Profile"

# ==============================
# Employee (Self-Referential)
# ==============================
class Employee(models.Model):
    name = models.CharField(max_length=100)
    manager = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, related_name='subordinates')

    def __str__(self):
        return self.name

# ==============================
# Horizontal Sharding Example
# ==============================
class StudentRegionNorth(Student):
    class Meta:
        db_table = 'student_north'
        managed = False  # Will manually manage this DB routing

class StudentRegionSouth(Student):
    class Meta:
        db_table = 'student_south'
        managed = False







import random
from django.core.management.base import BaseCommand
from faker import Faker
from students.models import Student, Teacher, Course, Subject, Profile
from students.models import StudentRegionNorth, StudentRegionSouth
from django.db import transaction

fake = Faker()

class Command(BaseCommand):
    help = 'Populate the database with dummy data'

    def handle(self, *args, **kwargs):
        self.stdout.write("Populating database...")
        
        NUM_COURSES = 5
        NUM_SUBJECTS = 10
        NUM_TEACHERS = 10
        NUM_STUDENTS = 1000

        # ===============================
        # Create Courses
        # ===============================
        courses = []
        for i in range(NUM_COURSES):
            course = Course.objects.create(name=f"Course {i+1}")
            courses.append(course)
        self.stdout.write(f"{NUM_COURSES} Courses created.")

        # ===============================
        # Create Subjects
        # ===============================
        subjects = []
        for i in range(NUM_SUBJECTS):
            subject = Subject.objects.create(name=f"Subject {i+1}")
            subjects.append(subject)
        self.stdout.write(f"{NUM_SUBJECTS} Subjects created.")

        # ===============================
        # Create Teachers
        # ===============================
        teachers = []
        for i in range(NUM_TEACHERS):
            teacher = Teacher.objects.create(
                name=fake.name(),
                email=fake.unique.email()
            )
            # Assign random subjects
            teacher.subjects.set(random.sample(subjects, k=random.randint(1, 5)))
            teachers.append(teacher)
        self.stdout.write(f"{NUM_TEACHERS} Teachers created.")

        # ===============================
        # Create Students
        # ===============================
        students = []
        for i in range(NUM_STUDENTS):
            student = Student.objects.create(
                name=fake.name(),
                email=fake.unique.email(),
                course=random.choice(courses)
            )
            # Assign random subjects
            student.subjects.set(random.sample(subjects, k=random.randint(1, 5)))
            # Create Profile
            Profile.objects.create(
                student=student,
                age=random.randint(18, 30),
                address=fake.address()
            )
            students.append(student)
        self.stdout.write(f"{NUM_STUDENTS} Students created.")

        # ===============================
        # Horizontal Sharding Example
        # ===============================
        # Let's split students by random into North and South regions
        for student in students[:NUM_STUDENTS//2]:
            StudentRegionNorth.objects.using('north_db').create(
                name=student.name,
                email=student.email,
                course_id=student.course.id
            )
        for student in students[NUM_STUDENTS//2:]:
            StudentRegionSouth.objects.using('south_db').create(
                name=student.name,
                email=student.email,
                course_id=student.course.id
            )
        self.stdout.write("Sharded students inserted into North and South DBs.")

        self.stdout.write(self.style.SUCCESS("Database population complete!"))
